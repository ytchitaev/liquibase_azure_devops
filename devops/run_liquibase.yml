trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: LIQUIBASE_VERSION
  type: string
  default: '4.23.0'

- name: LIQUIBASE_DATABASE
  type: string
  default: 'snowflake'

- name: RUN_STATUS
  type: boolean
  default: true

- name: RUN_VALIDATE
  type: boolean
  default: true

- name: RUN_UPDATE
  type: boolean
  default: true

variables:
- group: 'snowflake-variables'

steps:
- checkout: self

#- task: AzureKeyVault@2
#  inputs:
#    azureSubscription: 'your-subscription-name'
#    KeyVaultName: 'your-key-vault-name'
#    SecretsFilter: '*'
#  displayName: 'Read Azure Key Vault Secrets'

- script: |
    json_file_path="$(Build.SourcesDirectory)/liquibase/${{ parameters.LIQUIBASE_DATABASE }}/connector.json"
    if [ -f "$json_file_path" ]; then
        keyValuePairs=$(jq -r 'to_entries| .[] | "\(.key)=\(.value)"' "$json_file_path")
        echo "$keyValuePairs" | while IFS="=" read -r key value
        do
            echo "Key: $key, Value: $value"
            echo "##vso[task.setvariable variable=$key]$value"
        done
    else
        echo "JSON not found, skipping the step."
    fi
  displayName: 'Read JSON-defined connector variables (if exists)'

- script: |
    lv="${{ parameters.LIQUIBASE_VERSION }}"
    download_url="https://github.com/liquibase/liquibase/releases/download/v${lv}/liquibase-${lv}.zip"
    unzip_dir="$(Build.SourcesDirectory)/liquibase"
    wget "$download_url" && unzip "liquibase-${lv}.zip" -d "$unzip_dir" && chmod -R +x "$unzip_dir"
  displayName: 'Install Liquibase'

- script: |
    if [ -z "$(LIQUIBASE_CUSTOM_LIBRARY_URL)" ]; then
      echo "No custom library has been specified."
    else
      lib_dir="$(Build.SourcesDirectory)/liquibase/lib"
      mkdir -p "$lib_dir"
      wget "$(LIQUIBASE_CUSTOM_LIBRARY_URL)" -P "$lib_dir"
    fi
  displayName: 'Download/install Liquibase custom library (if required)'

- ${{ if parameters.RUN_STATUS }}:
  - script: |
      $(Build.SourcesDirectory)/liquibase/liquibase \
      --driver=$(SF_LIQUIBASE_DRIVER_NAME) \
      --changeLogFile=$(SF_LIQUIBASE_RELATIVE_CHANGELOG_PATH) \
      --url="$(SF_URL)" \
      --username=$(SF_USERNAME) \
      --password=$(SF_PASSWORD) \
      status
    displayName: 'Run Liquibase status command'

- ${{ if parameters.RUN_VALIDATE }}:
  - script: |
      $(Build.SourcesDirectory)/liquibase/liquibase \
      --driver=$(SF_LIQUIBASE_DRIVER_NAME) \
      --changeLogFile=$(SF_LIQUIBASE_RELATIVE_CHANGELOG_PATH) \
      --url="$(SF_URL)" \
      --username=$(SF_USERNAME) \
      --password=$(SF_PASSWORD) \
      validate
    displayName: 'Run Liquibase validate command'

- ${{ if parameters.RUN_UPDATE }}:
  - script: |
      $(Build.SourcesDirectory)/liquibase/liquibase \
      --driver=$(SF_LIQUIBASE_DRIVER_NAME) \
      --changeLogFile=$(SF_LIQUIBASE_RELATIVE_CHANGELOG_PATH) \
      --url="$(SF_URL)" \
      --username=$(SF_USERNAME) \
      --password=$(SF_PASSWORD) \
      update
    displayName: 'Run Liquibase update command'
